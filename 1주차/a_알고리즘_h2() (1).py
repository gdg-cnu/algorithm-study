# -*- coding: utf-8 -*-
"""a*알고리즘_h2()

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rBdm6v3G4DgFe9qD8OcFoKiU7nd8_748
"""

import queue

# 상태를 나타내는 클래스, f(n) 값을 저장한다.
class State:
    def __init__(self, board, goal, depth=0):
        self.board = board  # 현재의 보드 상태
        self.depth = depth  # 깊이
        self.goal = goal    # 목표 상태

    # i1과 i2를 교환하여서 새로운 상태를 반환한다.
    def get_new_board(self, i1, i2, depth):
        new_board = self.board[:]
        new_board[i1], new_board[i2] = new_board[i2], new_board[i1]
        return State(new_board, self.goal, depth)

    # 자식 노드를 확장하여서 리스트에 저장하여서 반환한다.
    def expand(self, moves):
        result = []
        i = self.board.index(0)  # 숫자 0(빈칸)의 위치를 찾는다.
        if i not in [0, 3, 6]:  # LEFT 연산자
            result.append(self.get_new_board(i, i - 1, moves))
        if i not in [0, 1, 2]:  # UP 연산자
            result.append(self.get_new_board(i, i - 3, moves))
        if i not in [2, 5, 8]:  # RIGHT 연산자
            result.append(self.get_new_board(i, i + 1, moves))
        if i not in [6, 7, 8]:  # DOWN 연산자
            result.append(self.get_new_board(i, i + 3, moves))
        return result

    # f(n)을 계산하여 반환한다.
    def f(self):
        return self.h2() + self.g()

    # 휴리스틱 함수 값인 h(n)을 계산하여 반환한다.
    # 각 타일의 현재위치와 목표위치 사이의 맨하탄 거리의 합
    def h2(self):
        distance = 0
        for i in range(1, 9):
            if self.board.index(i) != self.goal.index(i):  # 현재 위치와 목표 위치가 다를 때
                curr = self.board.index(i)
                goal = self.goal.index(i)
                distance += abs(curr // 3 - goal // 3)
                distance += abs(curr % 3 - goal % 3)
        return distance

    # 시작 노드로부터의 깊이를 반환한다.
    def g(self):
        return self.depth

    def __eq__(self, other):
        return self.board == other.board

    def __ne__(self, other):
        return self.board != other.board

    # 상태와 상태를 비교하기 위하여 less than 연산자를 정의한다.
    def __lt__(self, other):
        return self.f() < other.f()

    def __gt__(self, other):
        return self.f() > other.f()

    # 객체를 출력할 때 사용한다.
    def __str__(self):
        return f"f(n)={self.f()} h2(n)={self.h2()} g(n)={self.g()}\n" + \
               str(self.board[:3]) + "\n" + \
               str(self.board[3:6]) + "\n" + \
               str(self.board[6:]) + "\n"

# 0을 찾아서 0이랑 위치를 바꾸는 이동을 정의
import random
def up(old_ls,index):
    ls = old_ls[:]
    ls[index], ls[index-3] = ls[index-3], ls[index]
    return ls
def down(old_ls,index):
    ls = old_ls[:]
    ls[index], ls[index+3] = ls[index+3], ls[index]
    return ls
def left(old_ls,index):
    ls = old_ls[:]
    ls[index], ls[index-1] = ls[index-1], ls[index]
    return ls
def right(old_ls,index):
    ls = old_ls[:]
    ls[index], ls[index+1] = ls[index+1], ls[index]
    return ls

## 랜덤하게 10개의 초기상태(initial_states) 를 생성
goal = [1, 2, 3, 8, 0, 4, 7, 6, 5]

# 초기 상태를 저장할 리스트
initial_states = []

while len(initial_states) < 10:
    temp = goal[:]
    shuffle = 0

    while shuffle <= 30:
        i = temp.index(0)
        valid_moves = []

        if i not in [0, 1, 2]:
            valid_moves.append(i - 3)  # UP
        if i not in [0, 3, 6]:
            valid_moves.append(i - 1)  # LEFT
        if i not in [6, 7, 8]:
            valid_moves.append(i + 3)  # DOWN
        if i not in [2, 5, 8]:
            valid_moves.append(i + 1)  # RIGHT

        random_move = random.choice(valid_moves)
        temp[i], temp[random_move] = temp[random_move], temp[i]
        shuffle += 1

    if temp not in initial_states:
        initial_states.append(temp)

# 생성된 초기 상태 출력
for i in range(2):
    for j in range(3):
        for k in range(5):
            print(initial_states[i+k][3*j:3*j+3], "\t", end="")
        print()
    print()

# 초기 상태
initial_states

# 목표 상태
goal = [1, 2, 3,
        8, 0, 4,
        7, 6, 5]

score_h2 = []

# open 리스트는 우선순위 큐로 생성한다.
for states in initial_states:
  open_queue = queue.PriorityQueue()
  open_queue.put(State(states, goal))

  closed_queue = [ ]
  depth = 0
  count = 0

  while not open_queue.empty():
    current = open_queue.get()
    count += 1
    print(count)
    print(current)
    if current.board == goal:
        print("탐색 성공")
        score_h2.append(count)
        break
    depth = current.depth+1
    for state in current.expand(depth):
      if state not in closed_queue and state not in open_queue.queue :
        open_queue.put(state)
    closed_queue.append(current)
  else:
    print ('탐색 실패')
    score_h2.append(-1)

print(score_h2)